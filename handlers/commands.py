import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from db.database import Database

logger = logging.getLogger(__name__)
router = Router()
db = Database()


class AddEventStates(StatesGroup):
    waiting_for_date = State()
    waiting_for_description = State()


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "üìÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/addevent - –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "/events - –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è\n"
        "/myevents - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–æ–±—ã—Ç–∏—è\n"
        "/deleteevent - —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "/help - –ø–æ–º–æ—â—å"
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π - –°–ø—Ä–∞–≤–∫–∞

üîπ /addevent - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
   –§–æ—Ä–º–∞—Ç: /addevent [–¥–∞—Ç–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ]
   –ü—Ä–∏–º–µ—Ä: /addevent 2024-01-15 15:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π

üîπ /events - –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è (–¥–æ 10)

üîπ /myevents - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–æ–±—ã—Ç–∏—è

üîπ /deleteevent [id] - —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –ø–æ ID
   –ü—Ä–∏–º–µ—Ä: /deleteevent 5

üîπ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù –§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã:
‚Ä¢ YYYY-MM-DD HH:MM (2024-01-15 15:00)
‚Ä¢ YYYY-MM-DD (2024-01-15)
‚Ä¢ today, tomorrow
‚Ä¢ +N days (—á–µ—Ä–µ–∑ N –¥–Ω–µ–π)
    """
    await message.answer(help_text)


@router.message(Command("addevent"))
async def cmd_addevent(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addevent"""
    args = message.text.split()[1:]  # –£–±–∏—Ä–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    
    if len(args) < 2:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addevent [–¥–∞—Ç–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ]\n"
            "–ü—Ä–∏–º–µ—Ä: /addevent 2024-01-15 15:00 –í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π"
        )
        return
    
    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    try:
        date_str = args[0]
        description = " ".join(args[1:])
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        event_date = parse_date(date_str)
        if not event_date:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        event_id = db.add_event(
            title=description[:50],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
            description=description,
            event_date=event_date.isoformat(),
            user_id=message.from_user.id
        )
        
        await message.answer(
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üìÖ –î–∞—Ç–∞: {event_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üÜî ID: {event_id}"
        )
        
    except Exception as e:
        logger.error(f"Error adding event: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")


@router.message(Command("events"))
async def cmd_events(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /events"""
    try:
        events = db.get_events(limit=10)
        
        if not events:
            await message.answer("üìÖ –ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π")
            return
        
        response = "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
        
        for event in events:
            event_id, title, description, event_date, created_by, created_at = event
            event_datetime = datetime.fromisoformat(event_date)
            
            response += (
                f"üÜî {event_id}\n"
                f"üìÖ {event_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù {title}\n"
                f"üë§ –°–æ–∑–¥–∞–ª: {created_by}\n\n"
            )
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"Error getting events: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π")


@router.message(Command("myevents"))
async def cmd_myevents(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /myevents"""
    try:
        events = db.get_events_by_user(message.from_user.id)
        
        if not events:
            await message.answer("üìÖ –£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            return
        
        response = "üìÖ –í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n\n"
        
        for event in events:
            event_id, title, description, event_date, created_at = event
            event_datetime = datetime.fromisoformat(event_date)
            
            response += (
                f"üÜî {event_id}\n"
                f"üìÖ {event_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù {title}\n\n"
            )
        
        await message.answer(response)
        
    except Exception as e:
        logger.error(f"Error getting user events: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π")


@router.message(Command("deleteevent"))
async def cmd_deleteevent(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /deleteevent"""
    args = message.text.split()[1:]
    
    if len(args) != 1:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /deleteevent [id]\n"
            "–ü—Ä–∏–º–µ—Ä: /deleteevent 5"
        )
        return
    
    try:
        event_id = int(args[0])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
        event = db.get_event_by_id(event_id)
        if not event:
            await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        success = db.delete_event(event_id, message.from_user.id)
        
        if success:
            await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ {event_id} —É–¥–∞–ª–µ–Ω–æ")
        else:
            await message.answer("‚ùå –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è")
            
    except ValueError:
        await message.answer("‚ùå ID —Å–æ–±—ã—Ç–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        logger.error(f"Error deleting event: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")


def parse_date(date_str: str) -> datetime:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    date_str = date_str.lower().strip()
    
    try:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        if " " in date_str:
            return datetime.strptime(date_str, "%Y-%m-%d %H:%M")
        else:
            return datetime.strptime(date_str, "%Y-%m-%d")
    except ValueError:
        pass
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    now = datetime.now()
    
    if date_str == "today":
        return now.replace(hour=12, minute=0, second=0, microsecond=0)
    elif date_str == "tomorrow":
        tomorrow = now + timedelta(days=1)
        return tomorrow.replace(hour=12, minute=0, second=0, microsecond=0)
    elif date_str.startswith("+"):
        try:
            days = int(date_str[1:])
            future_date = now + timedelta(days=days)
            return future_date.replace(hour=12, minute=0, second=0, microsecond=0)
        except ValueError:
            pass
    
    return None
