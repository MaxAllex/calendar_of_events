import asyncio
import logging
from datetime import datetime, timedelta
from typing import List
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from db.database import Database

logger = logging.getLogger(__name__)


class NotificationService:
    def __init__(self, bot: Bot, db: Database):
        self.bot = bot
        self.db = db
        self.running = False
    
    async def start_notification_service(self):
        """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = True
        logger.info("Notification service started")
        
        while self.running:
            try:
                await self.check_and_send_notifications()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"Error in notification service: {e}")
                await asyncio.sleep(60)
    
    async def stop_notification_service(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.running = False
        logger.info("Notification service stopped")
    
    async def check_and_send_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞
            upcoming_events = self.db.get_upcoming_events(hours_ahead=2)
            
            for event in upcoming_events:
                event_id, title, description, event_date, created_by = event
                event_datetime = datetime.fromisoformat(event_date)
                time_until_event = event_datetime - datetime.now()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 1 —á–∞—Å –∏ –∑–∞ 15 –º–∏–Ω—É—Ç
                if self._should_send_notification(time_until_event):
                    await self._send_event_notification(event)
                    self.db.mark_notification_sent(event_id)
                    
        except Exception as e:
            logger.error(f"Error checking notifications: {e}")
    
    def _should_send_notification(self, time_until_event: timedelta) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        total_minutes = time_until_event.total_seconds() / 60
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∑–∞ 60 –º–∏–Ω—É—Ç –∏–ª–∏ –∑–∞ 15 –º–∏–Ω—É—Ç
        return abs(total_minutes - 60) < 2 or abs(total_minutes - 15) < 2
    
    async def _send_event_notification(self, event: tuple):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏–∏"""
        try:
            event_id, title, description, event_date, created_by = event
            event_datetime = datetime.fromisoformat(event_date)
            time_until_event = event_datetime - datetime.now()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–æ–±—ã—Ç–∏—è
            if time_until_event.total_seconds() / 60 < 20:
                time_text = "15 –º–∏–Ω—É—Ç"
            else:
                time_text = "1 —á–∞—Å"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è", callback_data="show_events")]
            ])
            
            notification_text = (
                f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏!\n\n"
                f"üìù {title}\n"
                f"üìÖ {event_datetime.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚è∞ –î–æ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–ª–æ—Å—å: {time_text}\n\n"
                f"ID —Å–æ–±—ã—Ç–∏—è: {event_id}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Å–æ–±—ã—Ç–∏—è
            await self.bot.send_message(
                chat_id=created_by,
                text=notification_text,
                reply_markup=keyboard
            )
            
            logger.info(f"Notification sent for event {event_id} to user {created_by}")
            
        except Exception as e:
            logger.error(f"Error sending notification for event {event[0]}: {e}")
    
    async def send_manual_notification(self, chat_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            await self.bot.send_message(chat_id=chat_id, text=message)
        except Exception as e:
            logger.error(f"Error sending manual notification: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_service = None


async def start_notifications(bot: Bot, db: Database):
    """–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_service
    notification_service = NotificationService(bot, db)
    await notification_service.start_notification_service()


async def stop_notifications():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_service
    if notification_service:
        await notification_service.stop_notification_service()
